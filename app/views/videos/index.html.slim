main
  section#myprofile
    div
      h2 프로필
      div    
        h3 개발역량 학습곡선
        div layout="" vertical="" center=""
          canvas id="myChart" 
      div
        h3 주니어 레벨의 다음 스킬들을 보유하고 있습니다.
        div.skil_list_form
          span.skil_list ruby on rails
          span.skil_list ruby
          span.skil_list java
          span.skil_list spring
          span.skil_list html
          span.skil_list slim
          span.skil_list css
          span.skil_list sass
          span.skil_list bootstrap
          span.skil_list javascript
          span.skil_list jQuery
          span.skil_list polymerjs
          span.skil_list json
          span.skil_list git

  section#training
    div layout="" horizontal="" center=""
      h2 이런 교육을 받았었습니다.
    div
      h3 -모바일을 위한 ux디자인 - 블로터아카데미(3일)
    div
      p 3일. 그렇게 긴 시간은 아니었지만, 제가 몰랐던 새로운 세계를 탐험하기엔 충분했던 시간이었습니다. 서적을 통해서 'ux디자인이 이런 것이구나!'를 알게 되었다면, 이 교육은 'ux디자인을 이렇게 하는구나!'를 알게된 기회였습니다. 
      p UX의 개념, UI와의 차이점, UX 디자인 공부법, UX 디자인 프로세스와 같은 개념 정리에서 시작하여, 실무에서 반드시 고려해야 할 서비스별 특징을 반영한 최적화된 산출물을 만드는 과정과 사용자 인터뷰를 통한 사용자 리서치 활동, 리서치 결과를 바탕으로 한 사용자분석법(Affinity Diagram, Persona) 을 활용한 사용자 모델링, 산출물을 바탕으로 하여 최종적으로 개발 직전 단계에 가까운 스토리보드를 작성하는 실습을 통해 실무 프로세스를 경험하였습니다.
      p 저는 이 세상을 만드는 요소 중심엔 ux디자인이 있다고 생각합니다. 세상속에 사람이 있고 그 사람의 경험을 만드는 것이 ux디자인입니다. 세상에 흔적을 남기고 싶은 저에게 ux디자인은 지속적인 관심사입니다.
      p 교육을 받은 경험이 있다고 지금 저에게 ux디자이너로써의 역량이 있진 않습니다. 페르소나라는 한 가지 주제만 해도 900페이지의 책이 있는데, 전 이 책을 읽기보단 개발을 택했습니다. 하지만 저에겐 함께 하는 ux디자이너의 리드에 공감하고 함께 문제를 해결해 나갈 수 있는 역량이 있습니다.
    div
      hr.paragraph
    div
      h3 -스마트웹&콘텐츠 개발 - 한빛교육센터(6개월)
    div
      p java의 기본 문법부터 클래스, java를 이용한 슈팅게임 만들기, sql crud의 개념과 DB모델링, jsp와 ajax의 활용, spring을 이용하여 mvc구현하기, android, 마지막으로 프로젝트를 끝으로 개발역량에 대한 기초를 다졌습니다.
      p 첫 프로젝트로 슈팅게임을 만들 때는 정말 잊을 수 없는 경험이었습니다. 플레이어의 공격패턴과 적들의 공격,출몰 패턴 등을 구현한다고 밤을 꼬박 세웠지만, 이상하게 힘이 들진 않고 무척 재미있었습니다. 끝에 와선 결국 완성을 시키고 내 손으로 만든 게임을 내가 직접 플레이 했을 때의 쾌감은 너무도 짜릿했습니다. 그 짜릿함은 저에게 '나도 할 수 있다'는 자신감이 되었습니다.

  section#portfolio
    div layout="" horizontal="" center=""
      h2 프로젝트 경험
    div#portfolio
      div
        h3 2014 공개 소프트웨어 대회
        div
          h4 프로젝트 주제
          div
            p -샌드박스 기반의 소셜커머스 플랫폼
          hr.paragraph
          h4 프로젝트 스택
          div.skil_list_form
            span.skil_list ruby
            span.skil_list ruby on rails
            span.skil_list jquery
            span.skil_list bootstrap
          hr.paragraph
          h4 참여 이력
          div
            ul
              li.stack_list 
                p 페이퍼프로토타이핑
              /li 
              /  = link_to 'Add video now!', new_video_path
              li.player_list
                -if @videos.any?
                  - a = 0
                  -@videos.in_groups_of(3) do |group|
                    -group.each do |video|
                      -if video
                        - a = a+1
                        -if a <= 4
                          div.img_list
                            = link_to image_tag("https://img.youtube.com/vi/#{video.uid}/mqdefault.jpg", alt: video.title,
                                      class: 'img-rounded'),
                            "https://www.youtube.com/watch?v=#{video.uid}", target: '_blank'
                            h5= video.title
              li.stack_list
                p 기획한 프로젝트를 구현하기엔 현재의 java지식으로는 어려움이 있었습니다. 그렇다고 java를 더 학습하기에는 당장의 주어진 시간이 많지 않았습니다. 저희 팀은 짧은 시간 안에 학습하면서 우리가 원하는 기능을 모두 구현할 수 있는 새로운 언어가 필요했고 그렇게 알게 된 것이 ruby와 ruby on rails 였습니다. 저희는 3주 동안 함께 스터디를 해가며 새로운 언어를 학습했습니다.
                p 결과는 좋았습니다. spring을 이용하여 게시판 하나를 구현하기 위해선 xml환경설정을 비롯하여 dao,service,bean 등 많은 과정이 필요했습니다. 하지만 ror은 몇 번의 command입력과 몇 줄의 ruby코드 입력으로 게시판이 구현되었습니다. 우리가 원하는 기능을 바로 구현할 수 있는 자신감이 생겼습니다. 
              li.stack_list
                p 저는 담당인 프런트엔드에 맞춰서 ruby는 .erb를 다루는데 있어서 부담감이 없을 정도로만 학습을 하고 그 외에는 views부문을 집중적으로 학습하고 코딩하였습니다. html/css/javascript 모두 처음하는 경험이었기 때문에 학습이 필요했습니다. 
                p html,css의 경우는 크롬개발툴을 이용하여 타사이트의 html문서를 무작정 따라하면서 감을 익혔습니다. 그러나 css는 제한된 시간 속에서 하나하나 학습하여 적용시키기엔 너무 비효율적이었습니다. 그런 와중에 bootstrap css프레임워크를 알게되었고, 이를 이용하여 사이트의 전반적인 ui를 구현할 수 있었습니다.
                p 문제는 javascript였습니다. html과 css는 비교적 단순한 구조여서 금방 학습하고 적용할 수 있었지만, javascript는 거의 새로운 언어체계였기 때문에 코딩의 첫 시작을 어떻게 해야 될지 감도 잡히지 않았습니다. 때문에 잠시 프로젝트를 중단하고 javascript에 집중하였습니다. 먼저 생활코딩이라는 너무나도 고마우신 이고잉님의 사이트를 통해 javascript의 기본을 다지고, 프로젝트 재진행 시에 구현해야 할 것이 장바구니페이지의 기능인 것을 감안하여 모 소셜커머스의 장바구니js를 다운로드 받아 분석하고 공부하였습니다. 그렇게 하여 만든 첫 js코드가 밑의 코드입니다.
              li.stack_list 
                p  
                  a href="https://github.com/sukyumKim/sentar/blob/master/app/views/carts/show.html.erb"
                    |https://github.com/sukyumKim/sentar/blob/master/app/views/carts/show.html.erb
              li.stack_list 
                p 한 번 만들고 보니 학습효과가 뛰어났습니다. 어떤 방법으로 코딩을 해야 할지 머리속에 조금씩 그려지게 되었습니다. 덕분에 제가 원하는 인터랙션을 구현할 수 있었습니다.
              li.stack_list 
                div
                  p 상품 옵션 추가하기
                  p 
                    a href="https://github.com/sukyumKim/sentar/blob/master/app/views/products/new.html.erb"
                      |https://github.com/sukyumKim/sentar/blob/master/app/views/products/new.html.erb
                  p 메세지 받는 사람 추가하기
                  p
                    a href="https://github.com/sukyumKim/sentar/blob/master/app/views/conversations/index.html.erb"
                      |https://github.com/sukyumKim/sentar/blob/master/app/views/conversations/index.html.erb
              / li.stack_list 
              /   p 시연동영상
              / li
              /   -if @videos.any?
              /   - b = 0
              /   -@videos.in_groups_of(3) do |group|
              /     -group.each do |video|
              /       -if video
              /         - b = b+1
              /         -if b > 4 && b < 6
              /           = image_tag "https://img.youtube.com/vi/#{video.uid}/mqdefault.jpg", alt: video.title, class: 'yt_preview img-rounded', :"data-uid" => video.uid
              /           h5= video.title
              li.stack_list
                p
                  a href="https://github.com/sukyumKim/sentar"
                    |https://github.com/sukyumKim/sentar
                  |(github주소)
              li.stack_list 
                p 
                  a href="https://fierce-atoll-3696.herokuapp.com/"
                    |https://fierce-atoll-3696.herokuapp.com/
                  |(project주소)
      div
        h3 스터디 프로젝트
        div
          h4 프로젝트 주제
          div
            p -언어교환 1:1매칭, 모임 플랫폼
          hr.paragraph
          h4 프로젝트 스택
          div.skil_list_form
            span.skil_list ruby
            span.skil_list ruby on rails
            span.skil_list jquery
            span.skil_list polymerjs
            span.skil_list bower
            span.skil_list slim
          hr.paragraph
          h4 참여 이력
          div
            ul
              li.stack_list
                p 프로젝트의 스토리보드를 제작하였습니다.
                p
                  a href="http://uvbqbv.axshare.com/"
                    |http://uvbqbv.axshare.com/
              li.stack_list
                p 첫 프로젝트와는 다르게 view에 관하여 무언가 새로운 스킬을 도입하고 싶었습니다. 그러다 javascript weekly를 통해 polymerjs를 알게 되었고 프로젝트에 도입하기로 했습니다. 그러나 순탄치만은 않았습니다.
                p 첫 문제로 몇몇 컴포넌트의 css가 rendering문제로 작동하지를 않았습니다. 이를 해결하기 위해 컴포넌트에 접근해야 했지만 polyerm-rails gem안의 파일을 일일이 접근하여 수정하기가 여간 번거로운게 아니었습니다. 그래서 gem아닌 bower를 이용하여 polymerjs를 관리하기로 하였습니다.
                p 두 번째 문제로 turbolinks와 manifest file 관리가 비효율적이었습니다. 프로젝트 초기 개발 당시 customiging한 컴포넌트들의 수가 많지 않아 문제점을 발견하지 못 하였습니다. 그러나 프로젝트가 초~중반으로 접어 들면서 customiging한 컴포넌트들의 수가 많아지고 문제점을 야기시켰습니다. 우선 turbolinks에 의해 컴포넌트가 재 렌더링이 되지 않아 컴포넌트들끼리의 의존성이 무너지고 오류를 일으켰습니다. 그리고 많은 컴포넌트들을 페이지 첫 로딩시 한꺼번에 로딩하려다 보니 지나치게 속도가 느려지는 성능 문제를 일으켰습니다. 이 문제를 해결하기 위해 application.html 하나에 모든 manifest file(components)을 관리하지 않고 html_import erb helper method에 각 액션마다 html을 import할 수 있도록 수정하여 이 문제들을 수정하였습니다.
                p 위 문제를 해결하고 나니 polymerjs는 저에게 만족스러운 결과를 주었습니다. 우선 손쉽게 material design으로 구현할 수 있어서 ui의 performance가 전 프로젝트보다 개선되었고, 개발자 임의대로 컴포넌트들을 customiging할 수 있어서 보다 semantic한 웹을 만들 수 있었습니다. 또한, view의 html파일에 지나치게 div를 사용하지 않아 깔끔한 코딩을 할 수 있었습니다.
                p 한가지 Polymerjs의 고질적인 문제를 말하자면, 성능 최적화를 위해선 그 페이지에서 사용되는 컴포넌트들을 npm의 vulcanize를 이용해서 한 개의 파일에 통합을 해야합니다. 이렇게 해야 여러개의 컴포넌트들을 임포시킬 필요가 없어서 성능이 매우 개선됩니다. 그러나 일단 번거로운 작업인건 확실합니다. 작년 말 부터 grunt를 이용하여 자동으로 vulcanize를 할 수 있어서 작업환경이 개선되긴 했지만 ror에서 사용하기엔 부담감이 있었습니다.
              li.stack_list
                p 최대한 html5를 활용하려 하였으나, 아직은 시기상조인 것 같았습니다. 아직은 크롬을 제외한 타브라우저들은 완벽한 호환을 하지 않았습니다. 이를 해결하기 위해 webshim이라는 polyfill library를 사용하긴 했으나, polymer의 webcomponentjs라는 polyfill library를 사용하고 있어서 호환성의 이유로 2개의 polyfill library를 사용하는 것이 비효율적인 느낌이 들었습니다.
              li.stack_list
                p 초기 haml를 이용하여 코드의 가독성과 깔끔함을 살렸습니다. 후에 rendering속도에 대한 이슈로 slim으로 갈아탔습니다.
              li.stack_list
                p 이미지를 등록할 때 수정하기 위한 툴로 jquery의 Jcrop를 사용하였습니다. picture의 컨트롤러를 따로 만들어주어 users_controller에서 pictures의 attr_accessor로 좌표값이 전달되지 않아 crop이 되지 않는 문제를 수정하였습니다.
              li.stack_list 
                p 
                  a href="https://github.com/leegyotaek/247"
                    |https://github.com/leegyotaek/247
                  |(github주소)
              li.stack_list 
                p 
                  a href="https://limitless-tundra-5055.herokuapp.com/"
                    |https://limitless-tundra-5055.herokuapp.com/
                  |(project주소)
